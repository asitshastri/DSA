--------------------------------------------------------------------------------------------------------------------------------------------------
                                                    1D ARRAY ASSIGNMENT
--------------------------------------------------------------------------------------------------------------------------------------------------
Q1: Write a program to print the sum of all the elements present on even indices in the given array.
Input 1: arr[] = {3,20,4,6,9}
ans:
public static void main(String[] args) {
        int arr[] = {3,20,4,6,9};
        int sum = 0;
        for (int i=0;i<arr.length;i=i+2) {
            sum+=arr[i];
        }
        System.out.println(sum);
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q2: Write a program to traverse over the elements of the array using for each loop and print all even
elements.
Input 1: arr[] = {34,21,54,65,43}
ans:
public static void main(String[] args) {
        int arr[] = {34,21,54,65,43};
        for (int i : arr) {
            if(i%2==0){
                System.out.print(i+" ");
            }
        }
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q3: Write a program to calculate the maximum element in the array.
Input 1: arr[] = {34,21,54,65,43}
ans:
#Brute Force Solution
    1-Sort array
    2-Print Last element (i.e arr[arr.length-1])
    Disadvantage- Time complexity for sorting =O(n)and Space Complexity=O(1)

#Optimal Solution
public static void main(String[] args) {
        int arr[] = {34,21,54,65,43};
        int largest=arr[0];
        for (int i=1;i<arr.length;i++) {
            if(arr[i]>largest){
                largest=arr[i];
            }
        }
        System.out.println(largest);
    }
    Time Complexity=O(n) & Space Complexity=O(1)
--------------------------------------------------------------------------------------------------------------------------------------------------
Q4: Write a program to find out the second largest element in a given array.
Input 1: arr[] = {34,21,54,65,43}
ans:
#Brute Force Solution:
    1- Sort the array
    2- ex: int arr={1,2,4,5,7,7};
    3- largest= arr[arr.length-1]
    4- for(i=arr.length-2;i>=0;i--){
        if(arr[i]!=largest){
            second_largest = arr[i];
            break;
        }
    }
    Problem:- if arr={1,7,7,7,7,7,7,7} then the for loop will traverse all the array again
              if arr={7,7,7,7,7,7,7,7} then no 2nd largest element
              thus worst case
              complexity= Nlog+N

#Better Solution:
    1- First find the largest element using Q3
    2-take second_large=-1
        check if:-
        -second_large<arr[0]?
        -second_large<largest?
        -if both yes then let: second_large=arr[0]
    Time Complexity: O(N+N)=O(2N) //don't mention O(N in interview)

#Optimal Solution:
    1- arr={1,2,4,7,7,5};
    2- largest = arr[0]
    3- second_largest = -1(assuming no -ve no) or second_largest=Integer.MIN_VALUE(if -ve no exist in array)
    4- concept= When a new no becomes largest the previous largest becomes 2nd largest
//secondLargest
    public static int secondLargest(int arr[],int n){
        int largest = arr[0];
        int sLargest = -1;
        for(int i=1;i<n;i++){
            if(arr[i]>largest){
                sLargest=largest;
                largest=arr[i];
            }
            else if(arr[i]<largest && arr[i]>sLargest){
                sLargest = arr[i];
            }
        }
        return sLargest;
    }
    //secondSmallest
    public static int secondSmallest(int arr[],int n){
        int smallest = arr[0];
        int sSmallest = Integer.MAX_VALUE;
        for(int i=1;i<n;i++){
            if(arr[i]<smallest){
                sSmallest = smallest;
                smallest = arr[i];
            }
            else if(arr[i]!=smallest && arr[i]<sSmallest){
                sSmallest = arr[i];
            }
        }
        return sSmallest;
    }
    public static void main(String[] args) {
        int arr[] = {34,21,54,65,43};
        int n=arr.length;
        int sSmallest = secondSmallest(arr,n);
        int sLargest = secondLargest(arr,n);
        System.out.println("Second Smallest Element= "+sSmallest+"\nSecond Largest Element= "+sLargest);
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q5: Given an array. Find the first peak element in the array. A peak element is an element that is greater than
its just left and just right neighbor.
ans:
public static void main(String[] args){
        int peak = -1;
        int arr[] = {1, 4,7,3,2,6,5};
        for(int i=1;i<arr.length-1;i++){
            if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
                if(peak<arr[i]){
                    peak = arr[i];
                }
            }  
        }
        System.out.println(peak);
    }

--------------------------------------------------------------------------------------------------------------------------------------------------
                                        2D ARRAY ASSIGNMENT
--------------------------------------------------------------------------------------------------------------------------------------------------
Q1: Take m and n input from the user and m * n integer inputs from user and print the following:
number of positive numbers
number of negative numbers
number of odd numbers
number of even numbers
number of 0.
ans:
public static void main(String[] args){
        int arr[][] = {{1,2,-3,4},{0,0,-4,2},{1,-1,2,3},{-4,-5,-7,0}};
        int positive_count = 0;
        int negative_count=0;
        int odd_count = 0;
        int even_count = 0;
        int zero_count = 0;
        for (int[] is : arr) {
            for(int x:is){
                if(x>0){
                    positive_count++;
                }
                if (x<0) {
                    negative_count++;
                }
                if (x%2!=0) {
                    odd_count++;
                }
                if(x%2==0){
                    even_count++;
                }
                if(x==0){
                    zero_count++;
                }
            }
        }
        System.out.println("number of positive numbers "+positive_count);
        System.out.println("number of negative numbers "+negative_count);
        System.out.println("number of odd numbers "+odd_count);
        System.out.println("number of even numbers "+even_count);
        System.out.println("number of 0 "+zero_count);
        
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q2: write a program to print the elements above the secondary diagonal in a user inputted
square matrix.
ans:
public static void main(String[] args){
        //square matrix
        int arr[][]={{1,2,3},{4,5,6},{7,8,9}};
        for(int i=0;i<=arr.length/2;i++){
            for(int j=0;j<=arr.length/2;j++){
                if((i+j)<=arr.length/2){
                    System.out.print(arr[i][j]+" ");
                }
            }
            
        }
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q3: write a program to print the elements of both the diagonals in a user inputted square matrix
in any order.
ans:
public static void main(String[] args){
        //square matrix
        int arr[][]={{1,2,3},{4,5,6},{7,8,9}};
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                if(i==j || (i+j)==arr.length-1){
                    System.out.print(arr[i][j]+" ");
                }
            }
        }
        
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q4: Write a program to find the largest element of a given 2D array of integers.
ans:
public static void main(String[] args){
        
        int arr[][]={{1,2,4,0},{2,5,7,-1},{4,2,6,9}};
        int largest = Integer.MIN_VALUE;
        for (int[] is : arr) {
            for(int x:is){
                if(x>largest){
                    largest = x;
                }
            }
        }
        System.out.println("Largest Element= "+largest);
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
Q5: Write a function which accepts a 2D array of integers and its size as arguments and
displays the elements of middle row and the elements of middle column. Printing can
be done in any order.
[Assuming the 2D Array to be a square matrix with odd dimensions i.e. 3x3, 5x5, 7x7 etc...]
ans:
public static void main(String[] args){
        
        int arr[][]={{1,2,3,4,5},{6,7,8,9,10},{11,12,13,14,15},{16,17,18,19,20},{21,22,23,24,25}};
        System.out.print("Middle Row: ");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if(i==arr.length/2){
                    System.out.print(arr[i][j]+" ");
                }
            }
        }
        System.out.print("\nMiddle Column: ");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if(j==arr.length/2){
                    System.out.print(arr[i][j]+" ");
                }
            }
        }
        
    }
--------------------------------------------------------------------------------------------------------------------------------------------------
                            TIME Complexity ASSIGNMENT
--------------------------------------------------------------------------------------------------------------------------------------------------