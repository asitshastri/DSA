--------------------------------------------------------------------------------------------------------------------------
                                    Assignment
--------------------------------------------------------------------------------------------------------------------------
Q1. Given a linked list and a key ‘X‘ in, the task is to check if X is present in the linked list or not.
Examples: 14->21->11->30->10, X = 14
Explanation: 14 is present in the linked list.
O/p: yes
Solution:
            //Finding Element x from linked list
            public void findX(int d){
                Node curr = head;
                int flag = 0;
                while(curr!=null){
                    if(curr.data==d){
                        flag=1;
                        break;
                    }
                    curr = curr.next;
                }
                if(flag==0){
                    System.out.println(d+" is not present inside Linked List");
                }
                else{
                    System.out.println(d+" is present inside Linked List");
                }
            }

Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the
new node is inserted after the given node.
Input : LL = 1 -> 2 -> 4 -> 5 -> 6 pointer = 2 value = 3.
Output : 1 -> 2 -> 3 -> 4 -> 5 -> 6
Solution
            public void insertAtX(int position,int newElement){
                Node newNode = new Node(newElement);
            
                if(position < 1) {
                System.out.print("\nposition should be >= 1.");
                } else if (position == 1) {
                newNode.next = head;
                head = newNode;
                } else {
                
                Node temp;
                temp = head;
                for(int i = 1; i < position-1; i++) {
                    if(temp != null) {
                    temp = temp.next;
                    }
                }
            
                if(temp != null) {
                    newNode.next = temp.next;
                    temp.next = newNode;  
                } else {
                    System.out.print("\nThe previous node is null.");
                }       
                }
            }

Q3. Given the head of a sorted linked list, delete all duplicates such that each element
appears only once. Return the linked list sorted as well.
Input: head = [1,1,2]
Output: [1,2]
Solution
                //delete Duplicates
                public void delDuplicates(){
                    if(head==null || head.next==null){
                        return;
                    }
                    Node curr = head;
                    while(curr!=null && curr.next!=null){
                        if(curr.data == curr.next.data){
                            curr.next = curr.next.next;
                        }
                        else{
                            curr = curr.next;
                        }
                    }
                    return;
                }

Q4. Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
Solution
            boolean isPalindrome(Node head)	{
                slow_ptr = head;
                fast_ptr = head;
                Node prev_of_slow_ptr = head;
                Node midnode = null; // To handle odd size list
                boolean res = true; // initialize result

                if (head != null && head.next != null) {
                
                    while (fast_ptr != null
                        && fast_ptr.next != null) {
                        fast_ptr = fast_ptr.next.next;
                        prev_of_slow_ptr = slow_ptr;
                        slow_ptr = slow_ptr.next;
                    }

                    if (fast_ptr != null) {
                        midnode = slow_ptr;
                        slow_ptr = slow_ptr.next;
                    }
                    second_half = slow_ptr;
                    prev_of_slow_ptr.next = null; 
                    reverse(); 
                    res = compareLists(head , second_half); 
                    reverse(); 

                    if (midnode != null) {
                        prev_of_slow_ptr.next = midnode;
                        midnode.next = second_half;
                    }
                    else
                        prev_of_slow_ptr.next = second_half;
                }
                return res;
            }
            void reverse(){
                Node prev = null;
                Node current = second_half;
                Node next;
                while (current != null) {
                    next = current.next;
                    current.next = prev;
                    prev = current;
                    current = next;
                }
                second_half = prev;
            }

            boolean compareLists(Node head1, Node head2)
            {
                Node temp1 = head1;
                Node temp2 = head2;

                while (temp1 != null && temp2 != null) {
                    if (temp1.data == temp2.data) {
                        temp1 = temp1.next;
                        temp2 = temp2.next;
                    }
                    else
                        return false;
                }

                if (temp1 == null && temp2 == null)
                    return true;
                return false;
            }

            public void push(int new_data){
                Node new_node = new Node(new_data);
                new_node.next = head;
                head = new_node;
            }


Q5. Given two numbers represented by two lists, write a function that returns the sum list. The
sum list is a list representation of the addition of two input numbers.
Example:
List1: 5->6->3
List2: 8->4->2
Resultant list: 1->4->0->5
Explanation: 563 + 842 = 1405
Solution
                void addTwoLists(Node first, Node second) {
                    Node start1 = new Node(0);
                    start1.next = first;
                    Node start2 = new Node(0);
                    start2.next = second;

                    addPrecedingZeros(start1, start2);
                    Node result = new Node(0);
                    if (sumTwoNodes(start1.next, start2.next, result) == 1) {
                        Node node = new Node(1);
                        node.next = result.next;
                        result.next = node;
                    }
                    printList(result.next);
                }

                private int sumTwoNodes(Node first, Node second, Node result) {
                    if (first == null) {
                        return 0;
                    }
                    int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
                    Node node = new Node(number % 10);
                    node.next = result.next;
                    result.next = node;
                    return number / 10;
                }
                private void addPrecedingZeros(Node start1, Node start2) {
                    Node next1 = start1.next;
                    Node next2 = start2.next;
                    while (next1 != null && next2 != null) {
                        next1 = next1.next;
                        next2 = next2.next;
                    }
                    if (next1 == null && next2 != null) {
                        while (next2 != null) {
                            Node node = new Node(0);
                            node.next = start1.next;
                            start1.next = node;
                            next2 = next2.next;
                        }
                    } else if (next2 == null && next1 != null) {
                        while (next1 != null) {
                            Node node = new Node(0);
                            node.next = start2.next;
                            start2.next = node;
                            next1 = next1.next;
                        }
                    }
                }

                void printList(Node head) {
                    while (head != null) {
                        System.out.print(head.data + " ");
                        head = head.next;
                    }
                    System.out.println("");
                }

